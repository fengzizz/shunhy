#pragma once
#include "WinConfig.h"
#include <memory>

namespace Shh
{
	enum EShhKeyState
	{
		EShhKS_Release,
		EShhKS_Press
	};
	enum EShhKeys
	{
		EShhKey_A = 0x41,
		EShhKey_Add = 0x6b,
		EShhKey_Apps = 0x5d,
		EShhKey_Attn = 0xf6,
		EShhKey_B = 0x42,
		EShhKey_Back = 8,
		EShhKey_BrowserBack = 0xa6,
		EShhKey_BrowserFavorites = 0xab,
		EShhKey_BrowserForward = 0xa7,
		EShhKey_BrowserHome = 0xac,
		EShhKey_EShhKey_BrowserRefresh = 0xa8,
		EShhKey_BrowserSearch = 170,
		EShhKey_BrowserStop = 0xa9,
		EShhKey_C = 0x43,
		EShhKey_CapsLock = 20,
		EShhKey_ChatPadGreen = 0xca,
		EShhKey_ChatPadOrange = 0xcb,
		EShhKey_Crsel = 0xf7,
		EShhKey_D = 0x44,
		EShhKey_D0 = 0x30,
		EShhKey_D1 = 0x31,
		EShhKey_D2 = 0x32,
		EShhKey_D3 = 0x33,
		EShhKey_D4 = 0x34,
		EShhKey_D5 = 0x35,
		EShhKey_D6 = 0x36,
		EShhKey_D7 = 0x37,
		EShhKey_D8 = 0x38,
		EShhKey_D9 = 0x39,
		EShhKey_Decimal = 110,
		EShhKey_Delete = 0x2e,
		EShhKey_Divide = 0x6f,
		EShhKey_Down = 40,
		EShhKey_E = 0x45,
		EShhKey_End = 0x23,
		EShhKey_Enter = 13,
		EShhKey_EraseEof = 0xf9,
		EShhKey_Escape = 0x1b,
		EShhKey_Execute = 0x2b,
		EShhKey_Exsel = 0xf8,
		EShhKey_F = 70,
		EShhKey_F1 = 0x70,
		EShhKey_F10 = 0x79,
		EShhKey_F11 = 0x7a,
		EShhKey_F12 = 0x7b,
		EShhKey_F13 = 0x7c,
		EShhKey_F14 = 0x7d,
		EShhKey_F15 = 0x7e,
		EShhKey_F16 = 0x7f,
		EShhKey_F17 = 0x80,
		EShhKey_F18 = 0x81,
		EShhKey_F19 = 130,
		EShhKey_F2 = 0x71,
		EShhKey_F20 = 0x83,
		EShhKey_F21 = 0x84,
		EShhKey_F22 = 0x85,
		EShhKey_F23 = 0x86,
		EShhKey_F24 = 0x87,
		EShhKey_F3 = 0x72,
		EShhKey_F4 = 0x73,
		EShhKey_F5 = 0x74,
		EShhKey_F6 = 0x75,
		EShhKey_F7 = 0x76,
		EShhKey_F8 = 0x77,
		EShhKey_F9 = 120,
		EShhKey_G = 0x47,
		EShhKey_H = 0x48,
		EShhKey_Help = 0x2f,
		EShhKey_Home = 0x24,
		EShhKey_I = 0x49,
		EShhKey_ImeConvert = 0x1c,
		EShhKey_ImeNoConvert = 0x1d,
		EShhKey_Insert = 0x2d,
		EShhKey_J = 0x4a,
		EShhKey_K = 0x4b,
		EShhKey_Kana = 0x15,
		EShhKey_Kanji = 0x19,
		EShhKey_L = 0x4c,
		EShhKey_LaunchApplication1 = 0xb6,
		EShhKey_LaunchApplication2 = 0xb7,
		EShhKey_LaunchMail = 180,
		EShhKey_Left = 0x25,
		EShhKey_LeftAlt = 0xa4,
		EShhKey_LeftControl = 0xa2,
		EShhKey_LeftShift = 160,
		EShhKey_LeftWindows = 0x5b,
		EShhKey_M = 0x4d,
		EShhKey_MediaNextTrack = 0xb0,
		EShhKey_MediaPlayPause = 0xb3,
		EShhKey_MediaPreviousTrack = 0xb1,
		EShhKey_MediaStop = 0xb2,
		EShhKey_Multiply = 0x6a,
		EShhKey_N = 0x4e,
		EShhKey_None = 0,
		EShhKey_NumLock = 0x90,
		EShhKey_NumPad0 = 0x60,
		EShhKey_NumPad1 = 0x61,
		EShhKey_NumPad2 = 0x62,
		EShhKey_NumPad3 = 0x63,
		EShhKey_NumPad4 = 0x64,
		EShhKey_NumPad5 = 0x65,
		EShhKey_NumPad6 = 0x66,
		EShhKey_NumPad7 = 0x67,
		EShhKey_NumPad8 = 0x68,
		EShhKey_NumPad9 = 0x69,
		EShhKey_O = 0x4f,
		EShhKey_Oem8 = 0xdf,
		EShhKey_OemAuto = 0xf3,
		EShhKey_OemBackslash = 0xe2,
		EShhKey_OemClear = 0xfe,
		EShhKey_OemCloseBrackets = 0xdd,
		EShhKey_OemComma = 0xbc,
		EShhKey_OemCopy = 0xf2,
		EShhKey_OemEnlW = 0xf4,
		EShhKey_OemMinus = 0xbd,
		EShhKey_OemOpenBrackets = 0xdb,
		EShhKey_OemPeriod = 190,
		EShhKey_OemPipe = 220,
		EShhKey_OemPlus = 0xbb,
		EShhKey_OemQuestion = 0xbf,
		EShhKey_OemQuotes = 0xde,
		EShhKey_OemSemicolon = 0xba,
		EShhKey_OemTilde = 0xc0,
		EShhKey_P = 80,
		EShhKey_Pa1 = 0xfd,
		EShhKey_PageDown = 0x22,
		EShhKey_PageUp = 0x21,
		EShhKey_Pause = 0x13,
		EShhKey_Play = 250,
		EShhKey_Print = 0x2a,
		EShhKey_PrintScreen = 0x2c,
		EShhKey_ProcessKey = 0xe5,
		EShhKey_Q = 0x51,
		EShhKey_R = 0x52,
		EShhKey_Right = 0x27,
		EShhKey_RightAlt = 0xa5,
		EShhKey_RightControl = 0xa3,
		EShhKey_RightShift = 0xa1,
		EShhKey_RightWindows = 0x5c,
		EShhKey_S = 0x53,
		EShhKey_Scroll = 0x91,
		EShhKey_Select = 0x29,
		EShhKey_SelectMedia = 0xb5,
		EShhKey_Separator = 0x6c,
		EShhKey_Sleep = 0x5f,
		EShhKey_Space = 0x20,
		EShhKey_Subtract = 0x6d,
		EShhKey_T = 0x54,
		EShhKey_Tab = 9,
		EShhKey_U = 0x55,
		EShhKey_Up = 0x26,
		EShhKey_V = 0x56,
		EShhKey_VolumeDown = 0xae,
		EShhKey_VolumeMute = 0xad,
		EShhKey_VolumeUp = 0xaf,
		EShhKey_W = 0x57,
		EShhKey_X = 0x58,
		EShhKey_Y = 0x59,
		EShhKey_Z = 90,
		EShhKey_Zoom = 0xfb
	};	
	class IKeys
	{
	public:
		virtual ~IKeys(){}
		virtual EShhKeys operator [](int index) = 0;
		virtual int	GetCount() = 0;
		virtual bool FindKey(EShhKeys key) = 0;
	};
	typedef std::shared_ptr<IKeys> Keys;
	//typedef std::vector<EShhKeys> Keys;

	class IKeyboard //SHH_WIN_API
	{
	public:
		virtual ~IKeyboard(){};
		virtual EShhKeyState GetKeyState(EShhKeys key) = 0;
		virtual Keys GetPressKeys() = 0;
		virtual bool IsKeyPress(EShhKeys key) = 0;
		virtual bool IsKeyUp(EShhKeys key) = 0;
	};	
}