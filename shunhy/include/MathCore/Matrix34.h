#pragma once
#include "MathCoreDef.h"
#include "MatrixDef.h"
namespace Shh
{
	inline Matrix34 Matrix34::operator + ( const Matrix34 &mat34 ) const
	{
		Matrix34 r;
		r.m34[0][0] = m34[0][0] + mat34.m34[0][0];
		r.m34[0][1] = m34[0][1] + mat34.m34[0][1];
		r.m34[0][2] = m34[0][2] + mat34.m34[0][2];
		r.m34[0][3] = m34[0][3] + mat34.m34[0][3];

		r.m34[1][0] = m34[1][0] + mat34.m34[1][0];
		r.m34[1][1] = m34[1][1] + mat34.m34[1][1];
		r.m34[1][2] = m34[1][2] + mat34.m34[1][2];
		r.m34[1][3] = m34[1][3] + mat34.m34[1][3];

		r.m34[2][0] = m34[2][0] + mat34.m34[2][0];
		r.m34[2][1] = m34[2][1] + mat34.m34[2][1];
		r.m34[2][2] = m34[2][2] + mat34.m34[2][2];
		r.m34[2][3] = m34[2][3] + mat34.m34[2][3];
		return r;
	}

	inline Matrix34 Matrix34::operator - ( const Matrix34 &mat34 ) const
	{
		Matrix34 r;
		r.m34[0][0] = m34[0][0] - mat34.m34[0][0];
		r.m34[0][1] = m34[0][1] - mat34.m34[0][1];
		r.m34[0][2] = m34[0][2] - mat34.m34[0][2];
		r.m34[0][3] = m34[0][3] - mat34.m34[0][3];

		r.m34[1][0] = m34[1][0] - mat34.m34[1][0];
		r.m34[1][1] = m34[1][1] - mat34.m34[1][1];
		r.m34[1][2] = m34[1][2] - mat34.m34[1][2];
		r.m34[1][3] = m34[1][3] - mat34.m34[1][3];

		r.m34[2][0] = m34[2][0] - mat34.m34[2][0];
		r.m34[2][1] = m34[2][1] - mat34.m34[2][1];
		r.m34[2][2] = m34[2][2] - mat34.m34[2][2];
		r.m34[2][3] = m34[2][3] - mat34.m34[2][3];
		return r;
	}

	inline Matrix34 Matrix34::operator * (const Matrix34 &mat34) const
	{
		Matrix34 r;
		r.m34[0][0] = m34[0][0] * mat34.m34[0][0] + m34[0][1] * mat34.m34[1][0] + m34[0][2] * mat34.m34[2][0];
		r.m34[0][1] = m34[0][0] * mat34.m34[0][1] + m34[0][1] * mat34.m34[1][1] + m34[0][2] * mat34.m34[2][1];
		r.m34[0][2] = m34[0][0] * mat34.m34[0][2] + m34[0][1] * mat34.m34[1][2] + m34[0][2] * mat34.m34[2][2];
		r.m34[0][3] = m34[0][0] * mat34.m34[0][3] + m34[0][1] * mat34.m34[1][3] + m34[0][2] * mat34.m34[2][3] + m34[0][3];

		r.m34[1][0] = m34[1][0] * mat34.m34[0][0] + m34[1][1] * mat34.m34[1][0] + m34[1][2] * mat34.m34[2][0];
		r.m34[1][1] = m34[1][0] * mat34.m34[0][1] + m34[1][1] * mat34.m34[1][1] + m34[1][2] * mat34.m34[2][1];
		r.m34[1][2] = m34[1][0] * mat34.m34[0][2] + m34[1][1] * mat34.m34[1][2] + m34[1][2] * mat34.m34[2][2];
		r.m34[1][3] = m34[1][0] * mat34.m34[0][3] + m34[1][1] * mat34.m34[1][3] + m34[1][2] * mat34.m34[2][3] + m34[1][3];

		r.m34[2][0] = m34[2][0] * mat34.m34[0][0] + m34[2][1] * mat34.m34[1][0] + m34[2][2] * mat34.m34[2][0];
		r.m34[2][1] = m34[2][0] * mat34.m34[0][1] + m34[2][1] * mat34.m34[1][1] + m34[2][2] * mat34.m34[2][1];
		r.m34[2][2] = m34[2][0] * mat34.m34[0][2] + m34[2][1] * mat34.m34[1][2] + m34[2][2] * mat34.m34[2][2];
		r.m34[2][3] = m34[2][0] * mat34.m34[0][3] + m34[2][1] * mat34.m34[1][3] + m34[2][2] * mat34.m34[2][3] + m34[2][3];
		return r;
	}

	inline Matrix4 Matrix34::operator * (const Matrix4 &mat4) const
	{
		Matrix4 r;
		r[0][0] = m34[0][0] * mat4[0][0] + m34[0][1] * mat4[1][0] + m34[0][2] * mat4[2][0] + m34[0][3] * mat4[3][0];
		r[0][1] = m34[0][0] * mat4[0][1] + m34[0][1] * mat4[1][1] + m34[0][2] * mat4[2][1] + m34[0][3] * mat4[3][1];
		r[0][2] = m34[0][0] * mat4[0][2] + m34[0][1] * mat4[1][2] + m34[0][2] * mat4[2][2] + m34[0][3] * mat4[3][2];
		r[0][3] = m34[0][0] * mat4[0][3] + m34[0][1] * mat4[1][3] + m34[0][2] * mat4[2][3] + m34[0][3] * mat4[3][3];

		r[1][0] = m34[1][0] * mat4[0][0] + m34[1][1] * mat4[1][0] + m34[1][2] * mat4[2][0] + m34[1][3] * mat4[3][0];
		r[1][1] = m34[1][0] * mat4[0][1] + m34[1][1] * mat4[1][1] + m34[1][2] * mat4[2][1] + m34[1][3] * mat4[3][1];
		r[1][2] = m34[1][0] * mat4[0][2] + m34[1][1] * mat4[1][2] + m34[1][2] * mat4[2][2] + m34[1][3] * mat4[3][2];
		r[1][3] = m34[1][0] * mat4[0][3] + m34[1][1] * mat4[1][3] + m34[1][2] * mat4[2][3] + m34[1][3] * mat4[3][3];

		r[2][0] = m34[2][0] * mat4[0][0] + m34[2][1] * mat4[1][0] + m34[2][2] * mat4[2][0] + m34[2][3] * mat4[3][0];
		r[2][1] = m34[2][0] * mat4[0][1] + m34[2][1] * mat4[1][1] + m34[2][2] * mat4[2][1] + m34[2][3] * mat4[3][1];
		r[2][2] = m34[2][0] * mat4[0][2] + m34[2][1] * mat4[1][2] + m34[2][2] * mat4[2][2] + m34[2][3] * mat4[3][2];
		r[2][3] = m34[2][0] * mat4[0][3] + m34[2][1] * mat4[1][3] + m34[2][2] * mat4[2][3] + m34[2][3] * mat4[3][3];

		return r;
	}

	inline Vector3 Matrix34::operator * (const Vector3& ve3) const
	{
		Vector3 v;
		v.x = m34[0][0] * ve3.x + m34[0][1] * ve3.y + m34[0][2] * ve3.z + m34[0][3];
		v.y = m34[1][0] * ve3.x + m34[1][1] * ve3.y + m34[1][2] * ve3.z + m34[1][3];
		v.z = m34[2][0] * ve3.x + m34[2][1] * ve3.y + m34[2][2] * ve3.z + m34[2][3];
		return v;
	}
}