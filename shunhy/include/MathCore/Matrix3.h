#pragma once
#include "MathCoreDef.h"
#include "MatrixDef.h"
//#include "Matrix4.h"

namespace Shh
{
	inline Matrix3 Matrix3::operator + (const Matrix3& mat) const
	{
		Matrix3 r;
		r.m33[0][0] = m33[0][0] + mat.m33[0][0];
		r.m33[0][1] = m33[0][1] + mat.m33[0][1];
		r.m33[0][2] = m33[0][2] + mat.m33[0][2];

		r.m33[1][0] = m33[1][0] + mat.m33[1][0];
		r.m33[1][1] = m33[1][1] + mat.m33[1][1];
		r.m33[1][2] = m33[1][2] + mat.m33[1][2];

		r.m33[2][0] = m33[2][0] + mat.m33[2][0];
		r.m33[2][1] = m33[2][1] + mat.m33[2][1];
		r.m33[2][2] = m33[2][2] + mat.m33[2][2];
		return r;
	}
	inline Matrix3 Matrix3::operator - (const Matrix3& mat) const
	{
		Matrix3 r;
		r.m33[0][0] = m33[0][0] - mat.m33[0][0];
		r.m33[0][1] = m33[0][1] - mat.m33[0][1];
		r.m33[0][2] = m33[0][2] - mat.m33[0][2];

		r.m33[1][0] = m33[1][0] - mat.m33[1][0];
		r.m33[1][1] = m33[1][1] - mat.m33[1][1];
		r.m33[1][2] = m33[1][2] - mat.m33[1][2];

		r.m33[2][0] = m33[2][0] - mat.m33[2][0];
		r.m33[2][1] = m33[2][1] - mat.m33[2][1];
		r.m33[2][2] = m33[2][2] - mat.m33[2][2];
		return r;
	}

	inline Matrix3 Matrix3::operator * (const Matrix3& mat3) const
	{
		Matrix3 r;
		r[0][0] = m33[0][0] * mat3[0][0] + m33[0][1] * mat3[1][0] + m33[0][2] * mat3[2][0];
		r[0][1] = m33[0][0] * mat3[0][1] + m33[0][1] * mat3[1][1] + m33[0][2] * mat3[2][1];
		r[0][2] = m33[0][0] * mat3[0][2] + m33[0][1] * mat3[1][2] + m33[0][2] * mat3[2][2];

		r[1][0] = m33[1][0] * mat3[0][0] + m33[1][1] * mat3[1][0] + m33[1][2] * mat3[2][0];
		r[1][1] = m33[1][0] * mat3[0][1] + m33[1][1] * mat3[1][1] + m33[1][2] * mat3[2][1];
		r[1][2] = m33[1][0] * mat3[0][2] + m33[1][1] * mat3[1][2] + m33[1][2] * mat3[2][2];

		r[2][0] = m33[2][0] * mat3[0][0] + m33[2][1] * mat3[1][0] + m33[2][2] * mat3[2][0];
		r[2][1] = m33[2][0] * mat3[0][1] + m33[2][1] * mat3[1][1] + m33[2][2] * mat3[2][1];
		r[2][2] = m33[2][0] * mat3[0][2] + m33[2][1] * mat3[1][2] + m33[2][2] * mat3[2][2];

		r[3][0] = m33[3][0] * mat3[0][0] + m33[3][1] * mat3[1][0] + m33[3][2] * mat3[2][0];
		r[3][1] = m33[3][0] * mat3[0][1] + m33[3][1] * mat3[1][1] + m33[3][2] * mat3[2][1];
		r[3][2] = m33[3][0] * mat3[0][2] + m33[3][1] * mat3[1][2] + m33[3][2] * mat3[2][2];
		return r;
	}
	inline Matrix4 Matrix3::operator * (const Matrix4& mat4) const
	{
		return Matrix4(
			m33[0][0] * mat4[0][0] + m33[0][1] * mat4[1][0] + m33[0][2] * mat4[2][0],
			m33[0][0] * mat4[0][1] + m33[0][1] * mat4[1][1] + m33[0][2] * mat4[2][1],
			m33[0][0] * mat4[0][2] + m33[0][1] * mat4[1][2] + m33[0][2] * mat4[2][2],
			m33[0][0] * mat4[0][3] + m33[0][1] * mat4[1][3] + m33[0][2] * mat4[2][3],

			m33[1][0] * mat4[0][0] + m33[1][1] * mat4[1][0] + m33[1][2] * mat4[2][0],
			m33[1][0] * mat4[0][1] + m33[1][1] * mat4[1][1] + m33[1][2] * mat4[2][1],
			m33[1][0] * mat4[0][2] + m33[1][1] * mat4[1][2] + m33[1][2] * mat4[2][2],
			m33[1][0] * mat4[0][3] + m33[1][1] * mat4[1][3] + m33[1][2] * mat4[2][3],

			m33[2][0] * mat4[0][0] + m33[2][1] * mat4[1][0] + m33[2][2] * mat4[2][0],
			m33[2][0] * mat4[0][1] + m33[2][1] * mat4[1][1] + m33[2][2] * mat4[2][1],
			m33[2][0] * mat4[0][2] + m33[2][1] * mat4[1][2] + m33[2][2] * mat4[2][2],
			m33[2][0] * mat4[0][3] + m33[2][1] * mat4[1][3] + m33[2][2] * mat4[2][3],

			mat4[3][0],
			mat4[3][1],
			mat4[3][2],
			mat4[3][3]);

	}
	inline Matrix43 Matrix3::operator * (const Matrix43& mat43) const
	{
		return Matrix43(
			m33[0][0] * mat43[0][0] + m33[0][1] * mat43[1][0] + m33[0][2] * mat43[2][0],
			m33[0][0] * mat43[0][1] + m33[0][1] * mat43[1][1] + m33[0][2] * mat43[2][1],
			m33[0][0] * mat43[0][2] + m33[0][1] * mat43[1][2] + m33[0][2] * mat43[2][2],

			m33[1][0] * mat43[0][0] + m33[1][1] * mat43[1][0] + m33[1][2] * mat43[2][0],
			m33[1][0] * mat43[0][1] + m33[1][1] * mat43[1][1] + m33[1][2] * mat43[2][1],
			m33[1][0] * mat43[0][2] + m33[1][1] * mat43[1][2] + m33[1][2] * mat43[2][2],

			m33[2][0] * mat43[0][0] + m33[2][1] * mat43[1][0] + m33[2][2] * mat43[2][0],
			m33[2][0] * mat43[0][1] + m33[2][1] * mat43[1][1] + m33[2][2] * mat43[2][1],
			m33[2][0] * mat43[0][2] + m33[2][1] * mat43[1][2] + m33[2][2] * mat43[2][2],

			mat43[3][0],
			mat43[3][1],
			mat43[3][2]);
	}


}