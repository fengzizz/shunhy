#pragma once
#include "MathCoreDef.h"
#include "MatrixDef.h"
//#include "Matrix4.h"

namespace Shh
{
	inline Matrix43 Matrix43::operator + (const Matrix43& mat) const
	{
		Matrix43 r;
		r.m43[0][0] = m43[0][0] + mat.m43[0][0];
		r.m43[0][1] = m43[0][1] + mat.m43[0][1];
		r.m43[0][2] = m43[0][2] + mat.m43[0][2];

		r.m43[1][0] = m43[1][0] + mat.m43[1][0];
		r.m43[1][1] = m43[1][1] + mat.m43[1][1];
		r.m43[1][2] = m43[1][2] + mat.m43[1][2];

		r.m43[2][0] = m43[2][0] + mat.m43[2][0];
		r.m43[2][1] = m43[2][1] + mat.m43[2][1];
		r.m43[2][2] = m43[2][2] + mat.m43[2][2];

		r.m43[3][0] = m43[3][0] + mat.m43[3][0];
		r.m43[3][1] = m43[3][1] + mat.m43[3][1];
		r.m43[3][2] = m43[3][2] + mat.m43[3][2];
		return r;
	}

	inline Matrix43 Matrix43::operator - (const Matrix43& mat) const
	{
		Matrix43 r;
		r.m43[0][0] = m43[0][0] - mat.m43[0][0];
		r.m43[0][1] = m43[0][1] - mat.m43[0][1];
		r.m43[0][2] = m43[0][2] - mat.m43[0][2];

		r.m43[1][0] = m43[1][0] - mat.m43[1][0];
		r.m43[1][1] = m43[1][1] - mat.m43[1][1];
		r.m43[1][2] = m43[1][2] - mat.m43[1][2];

		r.m43[2][0] = m43[2][0] - mat.m43[2][0];
		r.m43[2][1] = m43[2][1] - mat.m43[2][1];
		r.m43[2][2] = m43[2][2] - mat.m43[2][2];

		r.m43[3][0] = m43[3][0] - mat.m43[3][0];
		r.m43[3][1] = m43[3][1] - mat.m43[3][1];
		r.m43[3][2] = m43[3][2] - mat.m43[3][2];
		return r;
	}

	inline Matrix43 Matrix43::operator * (const Matrix43& mat) const
	{
		return Matrix43(
			m43[0][0] * mat[0][0] + m43[0][1] * mat[1][0] + m43[0][2] * mat[2][0],
			m43[0][0] * mat[0][1] + m43[0][1] * mat[1][1] + m43[0][2] * mat[2][1],
			m43[0][0] * mat[0][2] + m43[0][1] * mat[1][2] + m43[0][2] * mat[2][2],

			m43[1][0] * mat[0][0] + m43[1][1] * mat[1][0] + m43[1][2] * mat[2][0],
			m43[1][0] * mat[0][1] + m43[1][1] * mat[1][1] + m43[1][2] * mat[2][1],
			m43[1][0] * mat[0][2] + m43[1][1] * mat[1][2] + m43[1][2] * mat[2][2],

			m43[2][0] * mat[0][0] + m43[2][1] * mat[1][0] + m43[2][2] * mat[2][0],
			m43[2][0] * mat[0][1] + m43[2][1] * mat[1][1] + m43[2][2] * mat[2][1],
			m43[2][0] * mat[0][2] + m43[2][1] * mat[1][2] + m43[2][2] * mat[2][2],

			m43[3][0] * mat[0][0] + m43[3][1] * mat[1][0] + m43[3][2] * mat[2][0],
			m43[3][0] * mat[0][1] + m43[3][1] * mat[1][1] + m43[3][2] * mat[2][1],
			m43[3][0] * mat[0][2] + m43[3][1] * mat[1][2] + m43[3][2] * mat[2][2]
		);
	}

	inline Matrix4 Matrix43::operator * (const Matrix4& mat4) const
	{
		return Matrix4(
			m43[0][0] * mat4[0][0] + m43[0][1] * mat4[1][0] + m43[0][2] * mat4[2][0],
			m43[0][0] * mat4[0][1] + m43[0][1] * mat4[1][1] + m43[0][2] * mat4[2][1],
			m43[0][0] * mat4[0][2] + m43[0][1] * mat4[1][2] + m43[0][2] * mat4[2][2],
			m43[0][0] * mat4[0][3] + m43[0][1] * mat4[1][3] + m43[0][2] * mat4[2][3],

			m43[1][0] * mat4[0][0] + m43[1][1] * mat4[1][0] + m43[1][2] * mat4[2][0],
			m43[1][0] * mat4[0][1] + m43[1][1] * mat4[1][1] + m43[1][2] * mat4[2][1],
			m43[1][0] * mat4[0][2] + m43[1][1] * mat4[1][2] + m43[1][2] * mat4[2][2],
			m43[1][0] * mat4[0][3] + m43[1][1] * mat4[1][3] + m43[1][2] * mat4[2][3],

			m43[2][0] * mat4[0][0] + m43[2][1] * mat4[1][0] + m43[2][2] * mat4[2][0],
			m43[2][0] * mat4[0][1] + m43[2][1] * mat4[1][1] + m43[2][2] * mat4[2][1],
			m43[2][0] * mat4[0][2] + m43[2][1] * mat4[1][2] + m43[2][2] * mat4[2][2],
			m43[2][0] * mat4[0][3] + m43[2][1] * mat4[1][3] + m43[2][2] * mat4[2][3],

			m43[3][0] * mat4[0][0] + m43[3][1] * mat4[1][0] + m43[3][2] * mat4[2][0] + mat4[3][0],
			m43[3][0] * mat4[0][1] + m43[3][1] * mat4[1][1] + m43[3][2] * mat4[2][1] + mat4[3][1],
			m43[3][0] * mat4[0][2] + m43[3][1] * mat4[1][2] + m43[3][2] * mat4[2][2] + mat4[3][2],
			m43[3][0] * mat4[0][3] + m43[3][1] * mat4[1][3] + m43[3][2] * mat4[2][3] + mat4[3][3]
		);
	}
}